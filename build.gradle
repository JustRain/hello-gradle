apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'idea'
apply plugin: 'application'

group 'yjmyzz'
version '1.0-SNAPSHOT'

/*buildscript {
    repositories {
        mavenLocal()
        maven {
            //url 'http://maven.oschina.net/content/groups/public'
            url 'http://localhost:8081/nexus/content/groups/public/'
        }
        mavenCentral()
    }
}*/

//指定仓库位置(查找顺序优先级 :本机.m2 ——> 本机nexus私服 ——> 互联网中央仓库)
repositories {
    mavenLocal()
    maven {
        //url 'http://maven.oschina.net/content/groups/public'
        url 'http://localhost:8081/nexus/content/groups/public/'
    }
    mavenCentral()
}

configurations {
    mybatisGenerator
}

dependencies {
    //编译期 的依赖项
    compile(
            'org.springframework:spring-core:4.2.2.RELEASE',
            'org.springframework:spring-beans:4.2.2.RELEASE',
            'org.springframework:spring-context:4.2.2.RELEASE',
            'org.springframework:spring-context-support:4.2.2.RELEASE',
            'org.springframework:spring-aop:4.2.2.RELEASE',
            'org.springframework:spring-jdbc:4.2.2.RELEASE',
            'org.springframework:spring-test:4.2.2.RELEASE',
            'org.aspectj:aspectjweaver:1.8.7',
            'org.aspectj:aspectjrt:1.8.7',
            'org.apache.logging.log4j:log4j-api:2.4.1',
            'org.apache.logging.log4j:log4j-core:2.4.1',
            'commons-logging:commons-logging:1.2',
            'mysql:mysql-connector-java:5.1.36',
            'org.mybatis:mybatis-spring:1.2.3',
            'tk.mybatis:mapper:3.1.3',
            'org.mybatis:mybatis:3.3.0',
            'com.alibaba:druid:1.0.15',
            'org.mybatis.generator:mybatis-generator-core:1.3.2',
            'com.github.pagehelper:pagehelper:4.0.1',
            'junit:junit:4.12',
    )
    //测试期的 依赖项:
    testCompile group: 'junit', name: 'junit', version: '4.12'

    //mybtis生成插件依赖的jar包
    mybatisGenerator 'tk.mybatis:mapper:3.1.3'
    mybatisGenerator 'org.mybatis.generator:mybatis-generator-core:1.3.2'
    mybatisGenerator 'mysql:mysql-connector-java:5.1.36'

}

task mybatisGenerate << {
    ext.destDir = new File(buildDir, 'mybatisGenerate')
    destDir.mkdirs()
    ant.properties['targetProject'] = destDir.path
    ant.taskdef(
            name: 'mbgenerator',
            classname: 'org.mybatis.generator.ant.GeneratorAntTask',
            classpath: configurations.mybatisGenerator.asPath
    )
    ant.mbgenerator(overwrite: true,
            configfile: 'src/main/resources/generatorConfig.xml', verbose: true) {
        propertyset {
            propertyref(name: 'targetProject')
        }
    }
}

//指定运行的主类入口
mainClassName = "demo.Hello"

//生成readme文档
task createDocs {
    def docs = file("$buildDir/docs")
    outputs.dir docs
    doLast {
        docs.mkdirs()
        new File(docs, "readme.txt").write("Read me!")
    }
}

//将readme复制到部署目录下
distributions {
    main {
        contents {
            from(createDocs) {
                into "docs"
            }
        }
    }
}

//打包源代码
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives sourcesJar
}

//生成pom.xml,方便转换成maven项目
task createPom << {
    pom {}.writeTo("$buildDir/pom.xml")

}


buildscript {
  repositories {
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
    classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.6"
  }
}

apply plugin: "org.sonarqube"

sonarqube {
  properties {
    property "sonar.projectName", "My Project Name"
    property "sonar.projectKey", "org.sonarqube:java-gradle-simple"
  }
}


//指定idea的jdk版本
idea {
    module {
        jdkName = '1.8'
    }
}

